import org.junit.*;
import static org.junit.Assert.*;

/**
 * Test class Array2Lab
 */
public class SlideGameTester{
  
  /**
   * Test the slide left method.
   */
  @Test
  public void testSlideLeft() {
    
    int[][] array1 = {{0, 1, 1, 2}, {1, 2, 3, 3}, {1, 1, 1, 1}, {0, 0, 0, 1}, {1, 0, 0, 2}};
    int[][] expected1 = {{4, 0, 0, 0}, {1, 2, 3, 3}, {1, 1, 1, 1}, {0, 0, 0, 1}, {1, 0, 0, 2}};    //testing first and 0, 1, many
    
    int[][] array2 = {{0, 1, 1, 2}, {1, 2, 3, 3}, {1, 1, 1, 1}, {0, 0, 0, 1}, {1, 0, 0, 2}};
    int[][] expected2 = {{0, 1, 1, 2}, {1, 2, 6, 0}, {1, 1, 1, 1}, {0, 0, 0, 1}, {1, 0, 0, 2}};    //testing middle and 0, 1, many
    
    int[][] array3 = {{0, 1, 1, 2}, {1, 2, 3, 3}, {1, 1, 1, 1}, {0, 0, 0, 1}, {1, 0, 0, 2}};
    int[][] expected3 = {{0, 1, 1, 2}, {1, 2, 3, 3}, {2, 2, 0, 0}, {0, 0, 0, 1}, {1, 0, 0, 2}};    //testing middle and 0, 1, many
    
    int[][] array4 = {{0, 1, 1, 2}, {1, 2, 3, 3}, {1, 1, 1, 1}, {0, 0, 0, 1}, {1, 0, 0, 2}};
    int[][] expected4 = {{0, 1, 1, 2}, {1, 2, 3, 3}, {1, 1, 1, 1}, {1, 0, 0, 0}, {1, 0, 0, 2}};    //testing middle and 0, 1, many
    
    int[][] array5 = {{0, 1, 1, 2}, {1, 2, 3, 3}, {1, 1, 1, 1}, {0, 0, 0, 1}, {1, 0, 0, 2}};
    int[][] expected5 = {{0, 1, 1, 2}, {1, 2, 3, 3}, {1, 1, 1, 1}, {0, 0, 0, 1}, {1, 2, 0, 0}};    //testing last and 0, 1, many
    
    //compares output to expected
    assertEquals(true, SlideGame1.slideLeft(array1, 0));
    assertEquals(true, SlideGame1.slideLeft(array2, 1));
    assertEquals(true, SlideGame1.slideLeft(array3, 2));
    assertEquals(true, SlideGame1.slideLeft(array4, 3));
    assertEquals(true, SlideGame1.slideLeft(array5, 4));
    
    //compares expected array to the actual result
    assertArrayEquals(expected1, array1);
    assertArrayEquals(expected2, array2);
    assertArrayEquals(expected3, array3);
    assertArrayEquals(expected4, array4);
    assertArrayEquals(expected5, array5);
  }
  
  /**
   * Test the slide right method.
   */
  @Test
  public void testSlideRight() {
    
    int[][] array1 = {{0, 1, 1, 2}, {1, 2, 3, 3}, {1, 1, 1, 1}, {0, 0, 0, 1}, {1, 0, 0, 2}};
    int[][] expected1 = {{0, 0, 2, 2}, {1, 2, 3, 3}, {1, 1, 1, 1}, {0, 0, 0, 1}, {1, 0, 0, 2}};    //testing first and 0, 1, many
    
    int[][] array2 = {{0, 1, 1, 2}, {1, 2, 3, 3}, {1, 1, 1, 1}, {0, 0, 0, 1}, {1, 0, 0, 2}};
    int[][] expected2 = {{0, 1, 1, 2}, {0, 1, 2, 6}, {1, 1, 1, 1}, {0, 0, 0, 1}, {1, 0, 0, 2}};    //testing middle and 0, 1, many
    
    int[][] array3 = {{0, 1, 1, 2}, {1, 2, 3, 3}, {1, 1, 1, 1}, {0, 0, 0, 1}, {1, 0, 0, 2}};
    int[][] expected3 = {{0, 1, 1, 2}, {1, 2, 3, 3}, {0, 0, 2, 2}, {0, 0, 0, 1}, {1, 0, 0, 2}};    //testing middle and 0, 1, many
    
    int[][] array4 = {{0, 1, 1, 2}, {1, 2, 3, 3}, {1, 1, 1, 1}, {0, 0, 0, 1}, {1, 0, 0, 2}};
    int[][] expected4 = {{0, 1, 1, 2}, {1, 2, 3, 3}, {1, 1, 1, 1}, {0, 0, 0, 1}, {1, 0, 0, 2}};    //testing middle and 0, 1, many
    
    int[][] array5 = {{0, 1, 1, 2}, {1, 2, 3, 3}, {1, 1, 1, 1}, {0, 0, 0, 1}, {1, 0, 0, 2}};
    int[][] expected5 = {{0, 1, 1, 2}, {1, 2, 3, 3}, {1, 1, 1, 1}, {0, 0, 0, 1}, {0, 0, 1, 2}};    //testing last and 0, 1, many
    
    //compares output to expected
    assertEquals(true, SlideGame1.slideRight(array1, 0));
    assertEquals(true, SlideGame1.slideRight(array2, 1));
    assertEquals(true, SlideGame1.slideRight(array3, 2));
    assertEquals(false, SlideGame1.slideRight(array4, 3));
    assertEquals(true, SlideGame1.slideRight(array5, 4));
    
    //compares expected array to the actual result
    assertArrayEquals(expected1, array1);
    assertArrayEquals(expected2, array2);
    assertArrayEquals(expected3, array3);
    assertArrayEquals(expected4, array4);
    assertArrayEquals(expected5, array5);
  }
  
  /**
   * Test the slide up method.
   */
  @Test
  public void testSlideUp() {
    
    int[][] array1 = {{0, 1, 1, 2}, {1, 2, 3, 3}, {1, 1, 1, 1}, {0, 0, 0, 1}, {1, 0, 0, 2}};
    int[][] expected1 = {{2, 1, 1, 2}, {1, 2, 3, 3}, {0, 1, 1, 1}, {0, 0, 0, 1}, {0, 0, 0, 2}};    //testing first and 0, 1, many
    
    int[][] array2 = {{0, 1, 1, 2}, {1, 2, 3, 3}, {1, 1, 1, 1}, {0, 0, 0, 1}, {1, 0, 0, 2}};
    int[][] expected2 = {{0, 1, 1, 2}, {1, 2, 3, 3}, {1, 1, 1, 1}, {0, 0, 0, 1}, {1, 0, 0, 2}};    //testing middle and 0, 1, many
    
    int[][] array3 = {{0, 1, 1, 2}, {1, 2, 3, 3}, {1, 1, 1, 1}, {0, 0, 0, 1}, {1, 0, 0, 2}};
    int[][] expected3 = {{0, 1, 1, 2}, {1, 2, 3, 3}, {1, 1, 1, 1}, {0, 0, 0, 1}, {1, 0, 0, 2}};    //testing middle and 0, 1, many
    
    int[][] array4 = {{0, 1, 1, 2}, {1, 2, 3, 3}, {1, 1, 1, 1}, {0, 0, 0, 1}, {1, 0, 0, 2}};
    int[][] expected4 = {{0, 1, 1, 2}, {1, 2, 3, 3}, {1, 1, 1, 4}, {0, 0, 0, 0}, {1, 0, 0, 0}};    //testing last and 0, 1, many
    
    //compares output to expected
    assertEquals(true, SlideGame1.slideUp(array1, 0));
    assertEquals(false, SlideGame1.slideUp(array2, 1));
    assertEquals(false, SlideGame1.slideUp(array3, 2));
    assertEquals(true, SlideGame1.slideUp(array4, 3));
    
    //compares expected array to the actual result
    assertArrayEquals(expected1, array1);
    assertArrayEquals(expected2, array2);
    assertArrayEquals(expected3, array3);
    assertArrayEquals(expected4, array4);
  }
  
  /**
   * Test the slide down method.
   */
  @Test
  public void testSlideDown() {
    
    int[][] array1 = {{0, 1, 1, 2}, {1, 2, 3, 3}, {1, 1, 1, 1}, {0, 0, 0, 1}, {2, 0, 0, 2}};
    int[][] expected1 = {{0, 1, 1, 2}, {0, 2, 3, 3}, {0, 1, 1, 1}, {2, 0, 0, 1}, {2, 0, 0, 2}};    //testing first and 0, 1, many
    
    int[][] array2 = {{0, 1, 1, 2}, {1, 2, 3, 3}, {1, 1, 1, 1}, {0, 0, 0, 1}, {1, 0, 0, 2}};
    int[][] expected2 = {{0, 0, 1, 2}, {1, 0, 3, 3}, {1, 1, 1, 1}, {0, 2, 0, 1}, {1, 1, 0, 2}};    //testing middle and 0, 1, many
    
    int[][] array3 = {{0, 1, 1, 2}, {1, 2, 3, 3}, {1, 1, 1, 1}, {0, 0, 0, 1}, {1, 0, 0, 2}};
    int[][] expected3 = {{0, 1, 0, 2}, {1, 2, 0, 3}, {1, 1, 1, 1}, {0, 0, 3, 1}, {1, 0, 1, 2}};    //testing middle and 0, 1, many
    
    int[][] array4 = {{0, 1, 1, 2}, {1, 2, 3, 3}, {1, 1, 1, 1}, {0, 0, 0, 1}, {1, 0, 0, 2}};
    int[][] expected4 = {{0, 1, 1, 0}, {1, 2, 3, 2}, {1, 1, 1, 3}, {0, 0, 0, 2}, {1, 0, 0, 2}};    //testing last and 0, 1, many
    
    //compares output to expected
    assertEquals(true, SlideGame1.slideDown(array1, 0));
    assertEquals(true, SlideGame1.slideDown(array2, 1));
    assertEquals(true, SlideGame1.slideDown(array3, 2));
    assertEquals(true, SlideGame1.slideDown(array4, 3));
    
    //compares expected array to the actual result
    assertArrayEquals(expected1, array1);
    assertArrayEquals(expected2, array2);
    assertArrayEquals(expected3, array3);
    assertArrayEquals(expected4, array4);
  }
  
  /**
   * Test the slide up and left method.
   */
  @Test
  public void testSlideUpLeft() {
    
    int[][] array1 = {{0, 1, 1, 2},
                      {1, 2, 3, 3},
                      {1, 1, 1, 1},
                      {0, 0, 0, 1}};
    int[][] expected1 = {{2, 1, 1, 2},
                         {2, 2, 3, 3},
                         {1, 0, 0, 1},
                         {0, 0, 0, 0}};     //tests first, middle, last, and 0, 1, many
    
    int[][] array2 = {{0, 4, 1, 2},
                      {1, 2, 3, 3},
                      {1, 1, 4, 1},
                      {0, 1, 3, 1}};
    int[][] expected2 = {{2, 4, 1, 2},
                         {2, 4, 3, 3},
                         {2, 3, 1, 1},
                         {0, 0, 0, 0}};     //tests first, middle, last, and 0, 1, many
    
    int[][] array3 = {{2, 3, 3, 2},
                      {1, 2, 3, 3},
                      {1, 1, 2, 1},
                      {0, 1, 1, 1}}; 
    int[][] expected3 = {{4, 6, 6, 2},
                         {2, 2, 1, 0},
                         {2, 1, 1, 0},
                         {0, 0, 0, 0}};     //tests first, middle, last, and 0, 1, many
    
    int[][] array4 = {{2, 2, 2, 2},
                      {2, 2, 2, 2},
                      {2, 2, 2, 2},
                      {2, 2, 2, 2}};
    int[][] expected4 = {{4, 4, 4, 2},
                         {4, 4, 2, 0},
                         {4, 2, 0, 0},
                         {2, 0, 0, 0}};     //tests first, middle, last, and 0, 1, many
    
    int[][] array5 = {{0, 1, 1, 2},
                      {0, 1, 0, 0},
                      {1, 1, 1, 1},
                      {0, 0, 1, 2}};
    int[][] expected5 = {{4, 2, 1, 2},
                         {2, 0, 0, 0},
                         {1, 0, 0, 0},
                         {0, 0, 0, 0}};     //tests first, middle, last, and 0, 1, many
    
    int[][] array6 = {{0, 0, 0},
                      {1, 0, 0},
                      {4, 2, 0},
                      {2, 4, 0},
                      {1, 3, 2},
                      {3, 2, 1},
                      {0, 1, 1},
                      {0, 2, 2},
                      {3, 3, 3},
                      {3, 3, 3}};
    int[][] expected6 = {{0, 0, 0},
                         {1, 0, 0},
                         {8, 2, 0},
                         {2, 2, 0},
                         {1, 3, 0},
                         {3, 2, 1},
                         {2, 1, 1},
                         {6, 3, 2},
                         {6, 0, 0},
                         {3, 0, 0}};     //tests first, middle, last, and 0, 1, many + weird cases for parameters
    
    int[][] array7 = {{0, 1, 0, 3, 3, 3, 1, 0, 2, 2},
                      {1, 3, 2, 4, 1, 3, 3, 2, 1, 2},
                      {1, 0, 2, 1, 3, 2, 1, 0, 2, 2}};
    int[][] expected7 = {{3, 1, 4, 3, 6, 6, 1, 1, 4, 2},
                         {1, 2, 2, 3, 1, 1, 0, 4, 2, 0},
                         {1, 0, 0, 1, 0, 2, 0, 0, 0, 0}};     //tests first, middle, last, and 0, 1, many + weird cases for parameters
    
    //loops go through every diagonal possible
    for(int i = 0; i < 4; i++) {
      SlideGame1.slideUpLeft(array1, i, 0);
    }
    for(int j = 1; j < 4; j++) {
      SlideGame1.slideUpLeft(array1, 0, j);
    }
    
    for(int i = 0; i < 4; i++) {
      SlideGame1.slideUpLeft(array2, i, 0);
    }
    for(int j = 1; j < 4; j++) {
      SlideGame1.slideUpLeft(array2, 0, j);
    }
    
    for(int i = 0; i < 4; i++) {
      SlideGame1.slideUpLeft(array3, i, 0);
    }
    for(int j = 1; j < 4; j++) {
      SlideGame1.slideUpLeft(array3, 0, j);
    }
    
    for(int i = 0; i < 4; i++) {
      SlideGame1.slideUpLeft(array4, i, 0);
    }
    for(int j = 1; j < 4; j++) {
      SlideGame1.slideUpLeft(array4, 0, j);
    }
    
    for(int i = 0; i < 4; i++) {
      SlideGame1.slideUpLeft(array5, i, 0);
    }
    for(int j = 1; j < 4; j++) {
      SlideGame1.slideUpLeft(array5, 0, j);
    }
    
    for(int i = 0; i < 10; i++) {
      SlideGame1.slideUpLeft(array6, i, 0);
    }
    for(int j = 1; j < 3; j++) {
      SlideGame1.slideUpLeft(array6, 0, j);
    }
    
    for(int i = 0; i < 3; i++) {
      SlideGame1.slideUpLeft(array7, i, 0);
    }
    for(int j = 1; j < 10; j++) {
      SlideGame1.slideUpLeft(array7, 0, j);
    }
    
    //compares the expected array values to the actual values
    assertArrayEquals(expected1, array1);
    assertArrayEquals(expected2, array2);
    assertArrayEquals(expected3, array3);
    assertArrayEquals(expected4, array4);
    assertArrayEquals(expected5, array5);
    assertArrayEquals(expected6, array6);
    assertArrayEquals(expected7, array7);
  }
  
  /**
   * Test the slide down and right method.
   */
  @Test
  public void testSlideDownRight() {
    
    int[][] array1 = {{0, 1, 1, 2},
                      {1, 2, 3, 3},
                      {1, 1, 1, 1},
                      {0, 0, 0, 1}};
    int[][] expected1 = {{0, 1, 1, 2},
                         {0, 0, 3, 3},
                         {0, 0, 0, 1},
                         {0, 1, 2, 4}};     //tests first, middle, last, and 0, 1, many
    
    int[][] array2 = {{1, 1, 2, 2},
                      {4, 2, 1, 2},
                      {1, 4, 1, 1},
                      {0, 0, 0, 1}};
    int[][] expected2 = {{0, 0, 0, 2},
                         {0, 0, 1, 4},
                         {0, 0, 1, 2},
                         {0, 1, 8, 4}};     //tests first, middle, last, and 0, 1, many
    
    int[][] array3 = {{0, 0, 0, 0},
                      {0, 20, 1, 0},
                      {0, 1, 20, 0},
                      {0, 0, 0, 0}};
    int[][] expected3 = {{0, 0, 0, 0},
                         {0, 0, 0, 0},
                         {0, 0, 0, 1},
                         {0, 0, 1, 40}};     //tests first, middle, last, and 0, 1, many
    
    int[][] array4 = {{1, 1, 1, 2},
                      {1, 0, 0, 0},
                      {1, 1, 1, 1},
                      {0, 2, 0, 0}};
    int[][] expected4 = {{0, 0, 0, 2},
                         {0, 0, 0, 1},
                         {1, 0, 0, 2},
                         {0, 2, 2, 2}};     //tests first, middle, last, and 0, 1, many
    
    int[][] array5 = {{2, 2, 2, 2},
                      {2, 2, 2, 2},
                      {2, 2, 2, 2},
                      {2, 2, 2, 2}};
    int[][] expected5 = {{0, 0, 0, 2},
                         {0, 0, 2, 4},
                         {0, 2, 4, 4},
                         {2, 4, 4, 4}};     //tests first, middle, last, and 0, 1, many
    
    int[][] array6 = {{0, 0, 0},
                      {1, 0, 0},
                      {4, 2, 0},
                      {2, 4, 0},
                      {1, 3, 2},
                      {3, 2, 1},
                      {0, 1, 1},
                      {0, 2, 2},
                      {3, 3, 3},
                      {3, 3, 3}};
    int[][] expected6 = {{0, 0, 0},
                         {0, 0, 0},
                         {0, 1, 0},
                         {2, 8, 2},
                         {1, 3, 2},
                         {3, 2, 1},
                         {0, 1, 1},
                         {0, 2, 2},
                         {0, 0, 3},
                         {3, 6, 6}};     //tests first, middle, last, and 0, 1, many + weird cases for parameters
    
    int[][] array7 = {{0, 1, 0, 3, 3, 3, 1, 0, 2, 2},
                      {1, 3, 2, 4, 1, 3, 3, 2, 1, 2},
                      {1, 0, 2, 1, 3, 2, 1, 0, 2, 2}};
    int[][] expected7 = {{0, 1, 0, 3, 0, 0, 0, 0, 0, 2},
                         {0, 3, 2, 4, 1, 6, 0, 1, 1, 4},
                         {1, 1, 2, 1, 3, 2, 1, 6, 4, 2}};     //tests first, middle, last, and 0, 1, many + weird cases for parameters
    
    //loops that test every possible diaginal
    for(int i = 0; i < 4; i++) {
      SlideGame1.slideDownRight(array1, i, 0);
    }
    for(int j = 1; j < 4; j++) {
      SlideGame1.slideDownRight(array1, 0, j);
    }
    
    for(int i = 0; i < 4; i++) {
      SlideGame1.slideDownRight(array2, i, 0);
    }
    for(int j = 1; j < 4; j++) {
      SlideGame1.slideDownRight(array2, 0, j);
    }
    
    for(int i = 0; i < 4; i++) {
      SlideGame1.slideDownRight(array3, i, 0);
    }
    for(int j = 1; j < 4; j++) {
      SlideGame1.slideDownRight(array3, 0, j);
    }
    
    for(int i = 0; i < 4; i++) {
      SlideGame1.slideDownRight(array4, i, 0);
    }
    for(int j = 1; j < 4; j++) {
      SlideGame1.slideDownRight(array4, 0, j);
    }
    
    for(int i = 0; i < 4; i++) {
      SlideGame1.slideDownRight(array5, i, 0);
    }
    for(int j = 1; j < 4; j++) {
      SlideGame1.slideDownRight(array5, 0, j);
    }
    
    for(int i = 0; i < 10; i++) {
      SlideGame1.slideDownRight(array6, i, 0);
    }
    for(int j = 1; j < 3; j++) {
      SlideGame1.slideDownRight(array6, 0, j);
    }
    
    for(int i = 0; i < 3; i++) {
      SlideGame1.slideDownRight(array7, i, 0);
    }
    for(int j = 1; j < 10; j++) {
      SlideGame1.slideDownRight(array7, 0, j);
    }
    
    //compares expected array values to the actual values
    assertArrayEquals(expected1, array1);
    assertArrayEquals(expected2, array2);
    assertArrayEquals(expected3, array3);
    assertArrayEquals(expected4, array4);
    assertArrayEquals(expected5, array5);
    assertArrayEquals(expected6, array6);
    assertArrayEquals(expected7, array7);
  }
  
  /**
   * Test the slide up and right method.
   */
  @Test
  public void testSlideUpRight() {
    
    int[][] array1 = {{0, 1, 1, 2},
                      {1, 2, 3, 3},
                      {1, 1, 1, 1},
                      {0, 0, 0, 1}};
    int[][] expected1 = {{0, 2, 1, 2},
                         {0, 2, 3, 3},
                         {1, 1, 1, 1},
                         {0, 0, 0, 1}};     //tests first, middle, last, and 0, 1, many
    
    int[][] array2 = {{1, 1, 2, 2},
                      {4, 2, 1, 2},
                      {1, 4, 2, 1},
                      {0, 1, 0, 1}};
    int[][] expected2 = {{1, 1, 4, 2},
                         {4, 1, 1, 4},
                         {0, 4, 1, 1},
                         {0, 0, 0, 1}};     //tests first, middle, last, and 0, 1, many
    
    int[][] array3 = {{0, 0, 0, 0},
                      {0, 20, 1, 0},
                      {0, 1, 20, 0},
                      {0, 0, 0, 0}};
    int[][] expected3 = {{0, 0, 20, 2},
                         {0, 0, 0, 20},
                         {0, 0, 0, 0},
                         {0, 0, 0, 0}};     //tests first, middle, last, and 0, 1, many
    
    int[][] array4 = {{1, 1, 1, 2},
                      {1, 0, 0, 0},
                      {1, 1, 1, 1},
                      {0, 2, 0, 0}};
    int[][] expected4 = {{1, 2, 2, 2},
                         {0, 0, 1, 1},
                         {0, 0, 2, 1},
                         {0, 0, 0, 0}};     //tests first, middle, last, and 0, 1, many
    
    int[][] array5 = {{2, 2, 2, 2},
                      {2, 2, 2, 2},
                      {2, 2, 2, 2},
                      {2, 2, 2, 2}};
    int[][] expected5 = {{2, 4, 4, 4},
                         {0, 2, 4, 4},
                         {0, 0, 2, 4},
                         {0, 0, 0, 2}};     //tests first, middle, last, and 0, 1, many
    
    int[][] array6 = {{0, 0, 0},
                      {1, 0, 0},
                      {4, 2, 0},
                      {2, 4, 0},
                      {1, 3, 2},
                      {3, 2, 1},
                      {0, 1, 1},
                      {0, 2, 2},
                      {3, 3, 3},
                      {3, 3, 3}};
    int[][] expected6 = {{0, 1, 4},
                         {0, 0, 4},
                         {0, 0, 4},
                         {0, 1, 6},
                         {0, 0, 4},
                         {0, 0, 2},
                         {0, 0, 1},
                         {0, 2, 2},
                         {3, 6, 6},
                         {0, 0, 3}};     //tests first, middle, last, and 0, 1, many + weird cases for parameters
    
    int[][] array7 = {{0, 1, 0, 3, 3, 3, 1, 0, 2, 2},
                      {1, 3, 2, 4, 1, 3, 3, 2, 1, 2},
                      {1, 0, 2, 1, 3, 2, 1, 0, 2, 2}};
    int[][] expected7 = {{0, 2, 3, 3, 3, 3, 1, 3, 4, 2},
                         {0, 1, 2, 4, 2, 6, 2, 1, 1, 4},
                         {0, 0, 2, 0, 0, 0, 0, 0, 0, 2}};     //tests first, middle, last, and 0, 1, many + weird cases for parameters
    
    //loops that test every diagonal possible
    for(int i = 0; i < 4; i++) {
      SlideGame1.slideUpRight(array1, i, 0);
    }
    for(int j = 1; j < 4; j++) {
      SlideGame1.slideUpRight(array1, 3, j);
    }
    
    for(int i = 0; i < 4; i++) {
      SlideGame1.slideUpRight(array2, i, 0);
    }
    for(int j = 1; j < 4; j++) {
      SlideGame1.slideUpRight(array2, 3, j);
    }
    
    for(int i = 0; i < 4; i++) {
      SlideGame1.slideUpRight(array3, i, 0);
    }
    for(int j = 1; j < 4; j++) {
      SlideGame1.slideUpRight(array3, 3, j);
    }
    
    for(int i = 0; i < 4; i++) {
      SlideGame1.slideUpRight(array4, i, 0);
    }
    for(int j = 1; j < 4; j++) {
      SlideGame1.slideUpRight(array4, 3, j);
    }
    
    for(int i = 0; i < 4; i++) {
      SlideGame1.slideUpRight(array5, i, 0);
    }
    for(int j = 1; j < 4; j++) {
      SlideGame1.slideUpRight(array5, 3, j);
    }
    
    for(int i = 0; i < 10; i++) {
      SlideGame1.slideUpRight(array6, i, 0);
    }
    for(int j = 1; j < 3; j++) {
      SlideGame1.slideUpRight(array6, 9, j);
    }
    
    for(int i = 0; i < 3; i++) {
      SlideGame1.slideUpRight(array7, i, 0);
    }
    for(int j = 1; j < 10; j++) {
      SlideGame1.slideUpRight(array7, 2, j);
    }
    
    //compares the expected array values to the actual array values
    assertArrayEquals(expected1, array1);
    assertArrayEquals(expected2, array2);
    assertArrayEquals(expected3, array3);
    assertArrayEquals(expected4, array4);
    assertArrayEquals(expected5, array5);
    assertArrayEquals(expected6, array6);
    assertArrayEquals(expected7, array7);
  }
  
  /**
   * Test the slide down and right method.
   */
  @Test
  public void testSlideDownLeft() {
    
    int[][] array1 = {{0, 1, 1, 2},
                      {1, 2, 3, 3},
                      {1, 1, 1, 1},
                      {0, 0, 0, 1}};
    int[][] expected1 = {{0, 0, 1, 0},
                         {2, 2, 2, 0},
                         {1, 3, 3, 0},
                         {1, 1, 1, 1}};     //tests first, middle, last, and 0, 1, many
    
    int[][] array2 = {{1, 1, 2, 2},
                      {4, 2, 1, 2},
                      {1, 4, 2, 1},
                      {0, 1, 0, 1}};
    int[][] expected2 = {{1, 1, 0, 0},
                         {4, 4, 2, 0},
                         {1, 1, 4, 0},
                         {4, 1, 1, 1}};     //tests first, middle, last, and 0, 1, many
    
    int[][] array3 = {{0, 0, 0, 0},
                      {0, 20, 1, 0},
                      {0, 1, 20, 0},
                      {0, 0, 0, 0}};
    int[][] expected3 = {{0, 0, 0, 0},
                         {0, 0, 0, 0},
                         {20, 0, 0, 0},
                         {2, 20, 0, 0}};     //tests first, middle, last, and 0, 1, many
    
    int[][] array4 = {{1, 1, 1, 2},
                      {1, 0, 0, 0},
                      {1, 1, 1, 1},
                      {0, 2, 0, 0}};
    int[][] expected4 = {{1, 0, 0, 0},
                         {2, 0, 0, 0},
                         {2, 2, 1, 0},
                         {1, 2, 1, 0}};     //tests first, middle, last, and 0, 1, many
    
    int[][] array5 = {{2, 2, 2, 2},
                      {2, 2, 2, 2},
                      {2, 2, 2, 2},
                      {2, 2, 2, 2}};
    int[][] expected5 = {{2, 0, 0, 0},
                         {4, 2, 0, 0},
                         {4, 4, 2, 0},
                         {4, 4, 4, 2}};     //tests first, middle, last, and 0, 1, many
    
    int[][] array6 = {{0, 0, 0},
                      {1, 0, 0},
                      {4, 2, 0},
                      {2, 4, 0},
                      {1, 3, 2},
                      {3, 2, 1},
                      {0, 1, 1},
                      {0, 2, 2},
                      {3, 3, 3},
                      {3, 3, 3}};
    int[][] expected6 = {{0, 0, 0},
                         {1, 0, 0},
                         {4, 0, 0},
                         {4, 4, 0},
                         {1, 0, 0},
                         {6, 0, 0},
                         {4, 0, 1},
                         {2, 2, 0},
                         {3, 2, 0},
                         {6, 6, 3}};     //tests first, middle, last, and 0, 1, many + weird cases for parameters
    
    int[][] array7 = {{0, 1, 0, 3, 3, 3, 1, 0, 2, 2},
                      {1, 3, 2, 4, 1, 3, 3, 2, 1, 2},
                      {1, 0, 2, 1, 3, 2, 1, 0, 2, 2}};
    int[][] expected7 = {{0, 0, 0, 0, 3, 0, 0, 0, 0, 0},
                         {2, 3, 3, 4, 3, 1, 3, 4, 2, 0},
                         {1, 2, 2, 2, 6, 2, 1, 1, 4, 2}};     //tests first, middle, last, and 0, 1, many + weird cases for parameters
    
    //loops that test every diagonal possible
    for(int i = 0; i < 4; i++) {
      SlideGame1.slideDownLeft(array1, i, 0);
    }
    for(int j = 1; j < 4; j++) {
      SlideGame1.slideDownLeft(array1, 3, j);
    }
    
    for(int i = 0; i < 4; i++) {
      SlideGame1.slideDownLeft(array2, i, 0);
    }
    for(int j = 1; j < 4; j++) {
      SlideGame1.slideDownLeft(array2, 3, j);
    }
    
    for(int i = 0; i < 4; i++) {
      SlideGame1.slideDownLeft(array3, i, 0);
    }
    for(int j = 1; j < 4; j++) {
      SlideGame1.slideDownLeft(array3, 3, j);
    }
    
    for(int i = 0; i < 4; i++) {
      SlideGame1.slideDownLeft(array4, i, 0);
    }
    for(int j = 1; j < 4; j++) {
      SlideGame1.slideDownLeft(array4, 3, j);
    }
    
    for(int i = 0; i < 4; i++) {
      SlideGame1.slideDownLeft(array5, i, 0);
    }
    for(int j = 1; j < 4; j++) {
      SlideGame1.slideDownLeft(array5, 3, j);
    }
    
    for(int i = 0; i < 10; i++) {
      SlideGame1.slideDownLeft(array6, i, 0);
    }
    for(int j = 1; j < 3; j++) {
      SlideGame1.slideDownLeft(array6, 9, j);
    }
    
    for(int i = 0; i < 3; i++) {
      SlideGame1.slideDownLeft(array7, i, 0);
    }
    for(int j = 1; j < 10; j++) {
      SlideGame1.slideDownLeft(array7, 2, j);
    }
    
    //compares expected array values to their actual values
    assertArrayEquals(expected1, array1);
    assertArrayEquals(expected2, array2);
    assertArrayEquals(expected3, array3);
    assertArrayEquals(expected4, array4);
    assertArrayEquals(expected5, array5);
    assertArrayEquals(expected6, array6);
    assertArrayEquals(expected7, array7);
  }
}