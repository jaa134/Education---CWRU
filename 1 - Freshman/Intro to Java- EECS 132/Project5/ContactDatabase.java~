import java.util.*;
import java.util.Scanner;

/*
 * This class is a database that will store contacts for a certain person.
 * @author Jacob Alspaw
 */
public class ContactDatabase {
  
  /*
   * This method will take an Iterable and print the contents of the Iterable.
   * @param iterable
   */
  public static void printList(Iterable<DatabaseType> iterable) {
    for(int i = 1; iterable.iterator().hasNext(); i++) {
      System.out.print(i + ". " + iterable.iterator().next().toString());
    }
  }
  
  /*
   * This method will create a ContactDatabase and a Scanner object that reads from 
   * Standard.in. This will enable the user to initialize an interface.
   * @param args
   */
  public static void main(String[] args) {
    Database database = new Database();
    Scanner scanner = new Scanner(System.in);
    Iterable<DatabaseType> lastList = new ArrayList<DatabaseType>();
    String input = scanner.next();
        
    while(!input.equals("quit")) {                                       //a loop that will run until it is quit
      if(input.equals("add")) {                                    //if the user wants to add a contact
        Contact c = new Contact(scanner.next(), scanner.next(), scanner.next());
        database.add(c);
      }
      else if(input.equals("listby")) {                            //if the user wants to see ordered by trait
        String trait = scanner.next();
        if(database.getTable().containsKey(trait)) {
          printList(lastList = database.getList(trait));
        }
        else {
          System.out.println("List does not exist!");
        }
      }
      else if(input.equals("find")) {                             //if the user wants to find a contact using a trait
        String trait = scanner.next();
        String value = scanner.next();
        if(trait.equals("name")) {
          printList(lastList = database.lookup(trait, new Contact(value, null, null)));
        }
        else if(trait.equals("phone")) {
          printList(lastList = database.lookup(trait, new Contact(null, value, null)));
        }
        else if(trait.equals("email")) {
          printList(lastList = database.lookup(trait, new Contact(null, null, value)));
        }
      }
      else if(input.equals("delete")) {                         //if the user wants to delete an element in the most recent list
        int indexNum = Integer.parseInt(scanner.next());
        LinkedList<DatabaseType> list = new LinkedList<DatabaseType>();
        int i = 0;
        for(DatabaseType dbt: lastList) {
          i++;
          if(i != indexNum)
            list.add(dbt);
        }
        printList(list);
      }
      else if(input.equals("makeindex")) {
        String trait = scanner.next();
        database.makeIndex(trait);
      }
      else {
        System.out.println("Not a valid command!");  
      }
      input = scanner.next();      
    }
  }
}